#! /user/bin/bash
function createDb {
    read -p "Enter your Name: " dbname
    if [[ $dbname = "" ]] ;then 
        echo "please enter name to DBMS"
    elif [[ $dbname =~ [/.:~#*\|\-] ]];then
        echo "plese donot enter spcial charter"
    elif [[ $dbname =~ ^[+(0-9)] ]];then
        echo "please enter name not star with number"
    elif [[ -e $dbname ]];then
        echo "this data base all already exists"
    elif [[ $dbname =~ ^[a-zA-Z] ]];then 
        mkdir $dbname
    fi
}

function listDb {
    read -p "Enter your Name: " ls
    if [[ $ls = "" ]]
    then
    ls -l
    elif [[ $ls = -l ]]
    then
    ls -l
    elif [[ $ls = -a ]]
    then
    ls -a
    elif [[ $ls = -t ]]
    then
    ls -t
    elif [[ $ls = -r ]]
    then
    ls -r
    elif [[ $ls = -S ]]
    then
    ls -S
    elif [[ $ls = -R ]]
    then
    ls -R
    elif [[ $ls = -i ]]
    then
    ls -i
    elif [[ $ls = -g ]]
    then
    ls -g
    elif [[ $ls = -h ]]
    then
    ls -h
    elif [[ $ls = -d ]]
    then
    ls -d
    else 
    echo "enter thing relateve ls"
    fi
}
function createtable {
    read -p "Enter your Name: " table
    if [[ $table = "" ]] ;then 
        echo "please enter name to table"
    elif [[ $table =~ [/.:~#*\|\-] ]];then
        echo "plese donot enter spcial charter"
    elif [[ $table =~ ^[+(0-9)] ]];then
        echo "please enter name not star with number"
    elif [[ -e $table ]];then
        echo "this table all already exists"
    elif [[ $table =~ ^[a-zA-Z] ]];then 
        touch $table
    fi

    if [[ -f $table ]]; then
        valid=true
        while $valid ;do
            read -p  "enter number of colums: " numcol
            if [[ $numcol = +([1-9])*([0-9]) ]];then
                valid=false
            fi
        done
        valid=true
        while $valid;do
            read -p "enter name of pk: " pk
            if [[ $pk = "" ]] ;then 
                echo "please enter name to pk"
            elif [[ $pk =~ [/.:~#*\|\-] ]];then
                echo "plese donot enter spcial charter"
            elif [[ $pk =~ ^[+(0-9)] ]];then
                echo "please enter name not star with number"
            elif [[ -e $pk ]];then
                echo "this data base all already exists"
            elif [[ $pk =~ ^[a-zA-Z] ]];then 
                echo -n "$pk" >> "$table"
                echo -n "-" >> "$table"
                valid=false

            fi
        done

        valid=true
        while $valid; do
            read -p "enter int or str: " option
                if [[ "$option" = "int" || "$option" = "str" ]]; then
                    echo -n "$option" >> "$table"
                    echo -n "-" >> "$table"
                    valid=false
                else
                    echo  "please enter in int or str"
                fi

        done

        valid=true
        while $valid; do
            read -p "enter size of file: " sizefiled
            if [[ $sizefiled = +([1-9])*([0-9]) ]]; then
                echo -n "$sizefiled" >> "$table"
                echo -n ":" >> "$table"
                valid=false
            else
                echo  "please enter number"
            fi
        done

        for(( i = 1; i < $numcol; i++ ));do
        valid=true
            while $valid;
            do
            read -p "enter name field: " namefield
                if [[ $namefield = "" ]];then
                echo "please enter name to field"
                elif [[ $namefield  =~ [/.:~#*\|\-] ]];then
                echo "plese donot enter spcial charte"
                elif [[ $namefield  =~ ^[a-zA-Z] ]];then
                echo -n "$namefield" >> "$table"
                echo -n "-" >> "$table"
                else
                echo "something is wrong in name field"
                fi
                valid=false
            done



            valid=true
            while $valid; do
                read -p "enter int or str: " option
                    if [[ "$option" = "int" || "$option" = "str" ]]; then
                        echo -n "$option" >> "$table"
                        echo -n "-" >> "$table"
                        valid=false
                    else
                        echo  "please enter in int or str"
                    fi

            done

            valid=true
            while $valid; do
                read -p "enter size: " fieldsize
                if [[ $fieldsize = +([1-9])*([0-9]) ]]; then
                    echo -n "$fieldsize" >> "$table"
                    echo -n ":" >> "$table"
                    if [[ i -eq $numcol-1 ]]; then
                    echo 'finsh' >> "$table"
                    echo "ever thing is save"
                    fi
                    valid=false
                else
                    echo  "please enter number"
                fi
            done

    done
    else
    echo "wrong input"
    fi
}


function insertIntoTable {
    read -p "enter name table: " table
    if ! [[ -f $table ]];then
        echo "table is not exitst"
    else
        Insert=true
        while $Insert; do
			echo "enter primary key "$(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $1}')" of type $(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $2}') and size $(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $3}')"
            read
            pk_used=$(cut -d ':' -f1 "$table" | awk '{if(NR != 1) print $0}' | grep -x -e "$REPLY") 
            
# check_type start
                        # check_type=$(check_dataType "$REPLY" "$table" 1)
                        datatype=$(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $2}')
                            if [[ "$REPLY" = '' ]]; then
                                dt=1
                            elif [[ "$REPLY" = -?(0) ]]; then
                                dt=0 # error!
                            elif [[ "$REPLY" = ?(-)+([0-9])?(.)*([0-9]) ]]; then
                                if [[ $datatype == int ]]; then
                                    # datatype integer and the input is integer
                                    dt=1
                                else
                                    # datatype string and input is integer
                                    dt=1
                                fi
                            else
                                if [[ $datatype == int ]]; then
                                    # datatype integer and input is string
                                    dt=0 # error!
                                else
                                    # datatype string and input is string
                                    dt=1
                                fi
                            fi
                        # check_type end

                        # check_size=$(check_size "$REPLY" "$table" 1)
                        # check_size start
                            datasize=$(head -1 $table | cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $3}')
                            if [[ "${#REPLY}" -le $datasize || "${#REPLY}" -eq $datasize ]]; then
                                ds=1
                            else
                                ds=0 # error
                            fi
                        # check_size end

            







            if [[ $REPLY = "" ]] ;then 
                echo "please enter name to DBMS"
            elif [[ $REPLY =~ [/.:~#*\|\-] ]];then
                echo "plese donot enter spcial charter"
            elif [[ $dt == 0 ]];then
                echo "error in type"
            elif [[ $ds == 0 ]];then
                echo "error in size"
            elif ! [[ "$pk_used" == '' ]]; then
				echo "pk is already exit"
            else
                echo -n "$REPLY" >> "$table"
				echo -n ':' >> "$table"
                num_col=$(head -1 "$table" | awk -F: '{print NF}')

                for (( i=2 ; i <= num_col; i++ ));do
                    insertdata=true
                    while $insertdata ; do
                        echo "enter "$(head -1 "$table" | cut -d ':' -f$i | awk -F "-" 'BEGIN { RS = ":" } {print $1}')" of type $(head -1 "$table" | cut -d ':' -f$i | awk -F "-" 'BEGIN { RS = ":" } {print $2}') and size $(head -1 "$table" | cut -d ':' -f$i | awk -F "-" 'BEGIN { RS = ":" } {print $3}')"
                        read


                        # check_type start
                        # check_type=$(check_dataType "$REPLY" "$table" 1)
                        datatype=$(head -1 "$table" | cut -d ':' -f$i | awk -F "-" '{print $2}')
                            if [[ "$REPLY" = '' ]]; then
                                dt=1
                            elif [[ "$REPLY" = -?(0) ]]; then
                                dt=0 # error!
                            elif [[ "$REPLY" = ?(-)+([0-9])?(.)*([0-9]) ]]; then
                                if [[ $datatype == int ]]; then
                                    # datatype integer and the input is integer
                                    dt=1
                                else
                                    # datatype string and input is integer
                                    dt=0
                                fi
                            else
                                if [[ $datatype == int ]]; then
                                    # datatype integer and input is string
                                    dt=0 # error!
                                else
                                    # datatype string and input is string
                                    dt=1
                                fi
                            fi
                        # check_type end

                        # check_size=$(check_size "$REPLY" "$table" 1)
                        # check_size start
                            datasize=$(head -1 $table | cut -d ':' -f$i | awk -F "-" 'BEGIN { RS = ":" } {print $3}')
                            if [[ "${#REPLY}" -le $datasize || "${#REPLY}" -eq $datasize ]]; then
                                ds=1
                            else
                                ds=0 # error
                            fi
                        # check_size end


                        if [[ $dt == 0 ]];then
                            echo "error type"
                        elif [[ $ds == 0 ]];then
                            echo "error in size"
                        elif [[ $REPLY =~ [/.:~#*\|\-] ]];then
                            echo "plese donot enter spcial charter"
                        else
                            if [[ i -eq $num_col ]];then
                                echo "$REPLY" >> "$table"
								insertdata=false
								Insert=false
                            else
                                echo -n "$REPLY": >> "$table"
								insertdata=false
                            fi
                        fi


                    done
                done
            fi
        done
    fi
}
function deleteRecord {
    read -p "enter name table : " table
    if ! [[ -f $table ]]; then
        echo "this table donot exist"
    else
		echo "enter primary key "$(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $1}')" of type $(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $2}') and size $(head -1 "$table" | cut -d ':' -f1 | awk -F "-" '{print $3}')"
        read
        recordNum=$(cut -d ':' -f1 "$table" | awk '{if(NR != 1) print $0}' | grep -x -n -e "$REPLY" | cut -d':' -f1)
        if [[ $REPLY == '' ]];then
            echo "please enter number"
        elif [[ $recordNum = '' ]];then
            echo "this number not exit"
        else
            recordNum=$(($recordNum + 1))
            sed -i "${recordNum}d" "$table"
            echo "successfully"
            
        fi
    fi 
}


# Update into Table function
	    function updateIntoTable()
	    {   
		read -p "Enter table name: " tableName7
		# pwd
		# echo $tableName7
		read -p "Enter condition column name: " field
		fid=$(awk 'BEGIN{FS="|"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$field'") print i}}}' $tableName7)
		echo $fid
		if [[ $fid == "" ]]
		then echo "Not found"; secondMenu
		else read -p "Enter condition value: " val
		    res=$(awk 'BEGIN{FS="|"} { if ($'$fid'=="'$val'") print $'$fid' }' $tableName7 2>>./.error.log)
			echo $res
		    if [[ $res == "" ]]
		    then echo "Value not found"
		        secondMenu
		    else read -p "Enter field name to set: " setField
		    setFid=$(awk 'BEGIN{FS="|"}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$setField'") print i}}}' $tableName7)
			echo $setFid
		        if [[ $setFid == "" ]]
		        then echo "Not Found"
		            secondMenu
		        else read -p "Enter new value to set: " newValue
		            NR=$(awk 'BEGIN{FS="|"}{if ($'$fid' == "'$val'") print NR}' $tableName7 2>>./.error.log)
		            oldValue=$(awk 'BEGIN{FS="|"}{if(NR=='$NR'){for(i=1;i<=NF;i++){if(i=='$setFid') print $i}}}' $tableName7 2>>./.error.log)
		            echo $oldValue
		            sed -i ''$NR's/'$oldValue'/'$newValue'/g' $tableName7 2>>./.error.log
		            echo "Row Updated Successfully"
		            secondMenu
		        fi
		    fi
		fi
	    }